geom_point(
mapping = aes(x = displ, y = hwy),
position = "jitter"
)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point(position='jitter')
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point(position='jitter',size=.5)
?mpg
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point(position='jitter',size=.7, mapping = aes(color=trans))
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point(size=.7, mapping = aes(color=trans))
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point(size=.7, mapping = aes(color=trans)) +
geom_jitter(),
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point(size=.7, mapping = aes(color=trans)) +
geom_jitter()
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") +
coord_quickmap()
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") +
coord_quickmap()
/map_data
?map_data
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color=cut))
bar + coord_polar()
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color=cut))
bar + coord_flip()
bar + coord_polar()
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill=cut))
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill=cut))
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill=cut))
bar + coord_polar()
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill=cut))+
theme(aspect.ratio = 1)
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill=cut))+
theme(aspect.ratio = 1)
bar + coord_polar()
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill=cut))+
theme(aspect.ratio = 1)+
labs(x=NULL,y=NULL)
bar + coord_polar()
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill=cut))+
theme(aspect.ratio = 1)+
labs(x=NULL,y=NULL)
bar + coord_polar()
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill=cut))+
theme(aspect.ratio = 1)+
labs(x=NULL,y=NULL)
bar + coord_polar()
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill=cut))+
theme(aspect.ratio = 1)+
bar + coord_polar()
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill=cut))+
theme(aspect.ratio = 1)
bar + coord_polar()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy))
ggplot(data=mpg)+
geom_point(mapping=aes(x=hwy,y=cyl))
#ggplot(data=mpg)+
#geom_point(mapping=aes(x=class,y=drv)) not useful
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy,alpha=cyl))
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy))
ggplot(data=mpg) +
geom_point(mapping = aes(displ, hwy,alpha=cyl, color=displ<5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color=drv))+
geom_point(mapping=aes(displ,hwy,color=drv),size=.5)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill=cut))+
theme(aspect.ratio = 1)
bar + coord_polar()
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),position='fill')
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),position='identity') #default
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),position='dodge')
ggplot(data = mpg) +
geom_point(
mapping = aes(x = displ, y = hwy),
position = "jitter"
)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point(size=.7, mapping = aes(color=trans)) +
geom_jitter()
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") +
coord_quickmap()
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
stat_count(diamonds)
stat_count()
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_violin()
library(tidyverse)
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy))
ggplot(data=mpg)+
geom_point(mapping=aes(x=hwy,y=cyl))
#ggplot(data=mpg)+
#geom_point(mapping=aes(x=class,y=drv)) not useful
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_violin()
?mpg
str(mpg)
ggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy)) +
geom_violin()
ggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy)) +
geom_violin(trim=FALSE)
ggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy)) +
geom_violin(trim=FALSE)+
coord_flip()
ggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy)) +
geom_violin(trim=FALSE)+
ggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy)) +
geom_violin(trim=FALSE)
ggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy)) +
geom_violin(trim=FALSE,aes=mapping(color=manufacturer))
ggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy)) +
geom_violin(trim=FALSE,aes=(color=manufacturer))
ggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy)) +
geom_violin(trim=FALSE,mapping=aes(color=manufacturer))
ggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy)) +
geom_violin(trim=FALSE,mapping=aes(color=manufacturer),label=FALSE)
ggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy)) +
geom_violin(trim=FALSE,mapping=aes(color=manufacturer),
show.legend = FALSE)+
labs(title=paste("Violin plot for manufacturers"))
ggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy, fill=cty)) +
geom_violin(trim=FALSE,mapping=aes(color=manufacturer),
show.legend = FALSE)+
labs(title=paste("Violin plot for manufacturers"))
ggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy, fill=cty)) +
geom_violin(trim=FALSE,mapping=aes(color=manufacturer),
show.legend = FALSE)+
labs(title=paste("Violin plot for manufacturers"))
ggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy)) +
geom_violin(trim=FALSE,mapping=aes(fill=manufacturer),
show.legend = FALSE)+
labs(title=paste("Violin plot for manufacturers"))
library(tidyverse)
diamonds %>%
count(cut, clarity) %>%
ggplot(aes(clarity, cut, fill = n)) +
geom_tile()
?geom_tile
data <- c(1:10)
data
avg(data)
mean(data)
var(data)
data[0] <- data[0]+3
data
library(swirl)
swirl()
TRUE==TRUE
df <- c(423, 568, 246)
df <- c(423, 568, 246; 1955, 2205, 741)
data.frame?
data.class()
48*0.4557
a <- 21.8736
134+a
76+a
b <- 48*0.5443
b
154+b, 82+b
154+b
82+b
s <- 542
155.8736/s
97.8736/s
180.1264/s
108.1264/s
AB <- 0.2875897
ab <- 0.1805786
Ab <- 0.3323365
aB <- 0.1994952
AB+ab+Ab+aB
p1 <- AB*ab/(AB*ab+Ab+aB)
p1
p1 <- AB*ab/(AB*ab+Ab*aB)
p1
p2 <- aB*Ab/(aB*Ab+AB*ab)
p2
a <- 48*0.4392
b <- 48*0.5608
AB <- 134+a
AB
ab <- 76+a
ab
Ab <- 154+b
aB <- 82+b
Ab
aB
AB/s
ab/s
Ab/s
aB/s
AB*ab/(AB*ab+aB*Ab)
aB*Ab/(AB*ab+aB*Ab)
a <- 48*0.4331
b <- 48*0.5669
calculate <- function(a,b){}
print(a)
s <- 542
calculate <- function(a0,b0){
a <- 48*a0
print('a',a)
b <- 48*b0
print('b',b)
AB <- 134+a
Ab <- 154+b
aB <- 154+b
ab <- 76+a
print(AB, Ab, aB, ab)
print(AB/s, Ab/s, aB/s, ab/s)
}
calculate(0.4331,0.5669)
calculate(0.4331,0.5669)
b
s <- 542
s <- 542
calculate <- function(a0,b0){
a <- 48*a0
print('a',a)
b <- 48*b0
print(b)
AB <- 134+a
Ab <- 154+b
aB <- 154+b
ab <- 76+a
print(AB, Ab, aB, ab)
print(AB/s, Ab/s, aB/s, ab/s)
}
calculate(0.4331,0.5669)
s <- 542
calculate <- function(a0,b0){
a <- 48*a0
print(a)
b <- 48*b0
print(b)
AB <- 134+a
Ab <- 154+b
aB <- 154+b
ab <- 76+a
print(AB, Ab, aB, ab)
print(AB/s, Ab/s, aB/s, ab/s)
}
calculate(0.4331,0.5669)
s <- 542
s <- 542
calculate <- function(a0,b0){
print(c('a',a)
b <- 48*b0
print(c('b',b))
AB <- 134+a
Ab <- 154+b
aB <- 154+b
ab <- 76+a
print(AB, Ab, aB, ab)
print(AB/s, Ab/s, aB/s, ab/s)
}
calculate(0.4331,0.5669)
s <- 542
calculate <- function(a0,b0){
print(c('a',a)
print(c('b',b))
AB <- 134+a
Ab <- 154+b
aB <- 154+b
ab <- 76+a
print(c(AB, Ab, aB, ab)
print(c(AB/s, Ab/s, aB/s, ab/s))
}
calculate(0.4331,0.5669)
print(c('a',a)
s <- 542
calculate <- function(a0,b0){
a <- 48*a0
print(c('a',a)
b <- 48*b0
print(c('b',b))
AB <- 134+a
Ab <- 154+b
aB <- 154+b
ab <- 76+a
print(c(AB, Ab, aB, ab)
print(c(AB/s, Ab/s, aB/s, ab/s))
}
calculate(0.4331,0.5669)
s <- 542
a0 <- 0.4331
b0 <- 0.5669
a <- 48*a0
a
b <- 48*b0
b
AB <- 134+a
Ab <- 154+b
aB <- 154+b
ab <- 76+a
print(c(AB, Ab, aB, ab)
)
print(c(AB/s, Ab/s, aB/s, ab/s))
aB <- 82+b
ab <- 76+a
print(c(AB, Ab, aB, ab))
print(c(AB/s, Ab/s, aB/s, ab/s))
P1 <- AB*ab/(AB*ab+Ab*aB)
P2 <- Ab*aB/(AB*ab+Ab*aB)
P1
P2
s <- 542
a0 <- 0.4309
b0 <- 0.5691
a <- 48*a0
a
b <- 48*b0
b
AB <- 134+a
Ab <- 154+b
aB <- 82+b
ab <- 76+a
print(c(AB, Ab, aB, ab))
print(c(AB/s, Ab/s, aB/s, ab/s))
P1 <- AB*ab/(AB*ab+Ab*aB)
P2 <- Ab*aB/(AB*ab+Ab*aB)
P1
P2
ls
ls
ls()
?rbinom
# textbook Exercise 4.10 question 1
x <- rbinom(1, 100, 0.2)
x
# textbook Exercise 4.10 question 1
x <- rbinom(10, 100, 0.2)
x
rbinom(10, 1, 0.2)
rbinom(10, 2, 0.2)
install.packages('NIPTeR')
biocLite("Rsamtools")
source("http://bioconductor.org/biocLite.R")
BiocManager::install('biocLite')
BiocManager::install('biocLite')
biocLite("Rsamtools")
source("http://bioconductor.org/biocLite.R")
install.packages('MASS')
setwd('/Users/damarisdeng/BIM Assignments/BIM3008-Assignment/A2')
#q2
library(MASS)
# set seed and create data vectors
set.seed(98989)
# set seed and create data vectors
set.seed(0)
sample_size <- 100
sample_meanvector <- c(10, 5)
sample_covariance_matrix <- matrix(c(10, 5, 2, 9),
ncol = 2)
# create bivariate normal distribution
sample_distribution <- mvrnorm(n = sample_size,
mu = sample_meanvector,
Sigma = sample_covariance_matrix)
sample_distribution
?mvrnorm
# create bivariate normal distribution
sample <- mvrnorm(n = sample_size,
mu = sample_meanvector,
Sigma = sample_covariance_matrix)
# print top of distribution
head(sample)
gc()
class(sample)
sample
# create bivariate normal distribution
sample_dist <- mvrnorm(n = sample_size,
mu = sample_meanvector,
Sigma = sample_covariance_matrix)
# print top of distribution
head(sample_dist)
# create bivariate normal distribution
sample_dist <- mvrnorm(n = sample_size,
mu = sample_meanvector,
Sigma = sample_covariance_matrix)
#q2
library(MASS)
# set seed and create data vectors
set.seed(0)
sample_size <- 100
sample_meanvector <- c(10, 5)
sample_covariance_matrix <- matrix(c(10, 5, 2, 9),
ncol = 2)
# create bivariate normal distribution
sample_dist <- mvrnorm(n = sample_size,
mu = sample_meanvector,
Sigma = sample_covariance_matrix)
# print top of distribution
head(sample_dist)
class(sample_dist)
?mean
# calculate m and s from data
m = colMeans(sample_dist)
m
?sapply
s = sapply(sample_dist, var)
s
var(sample_dist)
?var
